%script{:src=>"network.js"}
%h1="Concerto Player Network Configuration"
%form{:method=>"post"}
    %h2="Connection Type"
    %select#connection_type{:name=>"connection_type"}
        / list out our available connection methods as options
        / set the html selected flag on the one that is currently 
        / selected in the config
        - CONNECTION_METHODS.each do |cm|
            %option{:value=>cm.basename,
                :selected=>(cm==connection_method.class)}=cm.description
    #connection
        #WiredConnection
            %h3="Wired Connection Settings"
            %p
                %label{:for=>"WiredConnection_interface_name"}="Interface Name"
                %select#interface_name{:name=>"WiredConnection/interface_name"}
                    %option{:value=>""}="Auto Select"
                    / list out available interfaces and their MAC addresses
                    / preselect one if there was one chosen in config
                    - ConcertoConfig::WiredConnection.interfaces.each do |iface|
                        %option{:value=>iface.name, :selected=>value_from(connection_method, :interface_name)==iface.name}="#{iface.name} - #{iface.mac}"
        #WirelessConnection
            %h3="Wireless Connection Settings (no encryption)"
            %p
                %label{:for=>"WirelessConnection_interface_name"}="Interface Name"
                %select#interface_name{:name=>"WirelessConnection/interface_name"}
                    %option{:value=>""}="Auto Select"
                    / same as above but with the wireless interfaces
                    - ConcertoConfig::WirelessConnection.interfaces.each do |iface|
                        %option{:value=>iface.name, :selected=>value_from(connection_method, :interface_name) == iface.name}="#{iface.name} - #{iface.mac}"
            %p
                %label{:for=>"WirelessConnection_ssid"}="SSID"
                %input{:type=>"text", :name=>"WirelessConnection/ssid", 
                    :value=>value_from(connection_method, :ssid)}
    %h2="IP Address"
    %select#addressing_type{:name=>"addressing_type"}
        - ADDRESSING_METHODS.each do |am|
            %option{:value=>am.basename,
                :selected=>(am==addressing_method.class)}=am.description
    #address
        #DHCPAddressing
        #StaticAddressing
            %h3="Static Address Settings"
            %p
                %label{:for=>"StaticAddressing_address"}="Address"
                %input{:type=>"text", :name=>"StaticAddressing/address",
                    :value=>value_from(addressing_method, :address)}
            %p
                %label{:for=>"StaticAddressing_netmask"}="Netmask"
                %input{:type=>"text", :name=>"StaticAddressing/netmask", 
                    :value=>value_from(addressing_method, :netmask)}
            %p
                %label{:for=>"StaticAddressing_gateway"}="Gateway"
                %input{:type=>"text", :name=>"StaticAddressing/gateway", 
                    :value=>value_from(addressing_method, :gateway)}
            %p
                %label{:for=>"StaticAddressing_address"}="Nameservers (separate with commas or spaces)"
                %input{:type=>"text", :name=>"StaticAddressing/nameservers_flat", 
                    :value=>value_from(addressing_method, :nameservers_flat)}

    %input{:type=>"submit"}

